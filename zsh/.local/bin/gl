#!/usr/bin/env python3

import sys
import re
import os
import shutil
from platform import uname


def main():
    arg = ""
    if len(sys.argv) >= 2:
        arg = sys.argv[1]
    gitlab_open(arg)


def gitlab_open(arg: str) -> None:
    if fetch("git rev-parse --is-inside-work-tree 2>/dev/null") != "true":
        print("not in git repo")
        sys.exit(0)

    host, org, repo = split_url(fetch("git config --get remote.origin.url"))
    if host == "":
        print("no host")
        return None

    url = f"https://{host}/{org}/{repo}"
    branch = fetch("git rev-parse --abbrev-ref HEAD 2>/dev/null")

    # merge link
    link_merge = f"{url}/-/merge_requests/new?merge_request[source_branch]={branch}"
    if branch == "master":
        link_merge = f"{link_merge}&merge_request[target_branch]=stage"

    for k, v in {"[": "%5B", "]": "%5D"}.items():
        link_merge = link_merge.replace(k, v)

    # tree link
    link_tree = f"{url}/-/tree/{branch}"

    # commit id link
    commit_id = fetch("git rev-parse HEAD")
    link_commit_id = f"{url}/-/commit/{commit_id}"

    # pipeline link
    link_pipeline = f"{url}/-/pipelines"

    if host == "github.com":
        link_tree = f"{url}/tree/{branch}"
        link_commit_id = f"{url}/commit/{commit_id}"
        link_pipeline = f"{url}/actions"

    # concat url
    open_url = url
    match arg:
        case "-m":
            open_url = link_merge
        case "-p":
            open_url = link_pipeline
        case "-b":
            open_url = link_tree
        case "-c":
            open_url = link_commit_id
        case _:
            open_url = url

    # print and open
    # echo -e "\e]52;c;$(base64 <<< content)\a"
    match current_platform():
        case "darwin":
            run(f"open '{open_url}'")
        case "wsl":
            # linux: run(f"echo '{open_url}' | xclip -selection clipboard -i")
            # wsl:   run(f"echo '{open_url}' | clip.exe")
            #  run(rf'''printf "\033]52;c;$(echo '{open_url}' | base64)\a"''')
            #  print(open_url, flush=True)
            # You should install wslu manually first
            run(f"wslview '{open_url}'")
        case "linux":
            if shutil.which("xdg-open"):
                run(f"xdg-open '{open_url}'")
            else:
                print(open_url, flush=True)


def split_url(url: str) -> tuple[str, str, str]:
    reg_ex = r"[a-zA-Z]+(@|://)(?P<host_name>\w[\w\.\-]+)(:|/)(?P<org>\w[\w\.\-\/]+)/(?P<repo>\w[\w\.\-]+)"
    if url.startswith("git"):
        reg_ex = r"[a-zA-Z]+(@|://)(?P<host_name>\w[\w\.\-]+)(:|/)(?P<org>\w[\w\.\-\/]+)/(?P<repo>\w[\w\.\-]+).git"
    result = re.match(reg_ex, url)
    if result is None:
        return "", "", ""
    return (result.group("host_name"), result.group("org"), result.group("repo"))


def fetch(command: str) -> str:
    return os.popen(command).read().strip()


def run(command: str) -> None:
    os.system(command)


def current_platform() -> str:
    match sys.platform:
        case "darwin":
            return "darwin"
        case "linux":
            # WSL: 5.15.79.1-microsoft-standard-WSL2
            if "microsoft-standard" in uname().release:
                return "wsl"
            return "linux"
    return "unsupported"


main()
