# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet err "With Single Field"
if err != nil {
	logrus.WithField("${1}": ${1}).Errorln("${2}", err)
}
${0}
endsnippet

snippet errf "With Fields"
if err != nil {
	logrus.WithFields(logrus.Fields{"${0}: ${1}"}).Errorln("${2}", err)
}
${0}
endsnippet

snippet nowdate "now date" 
time.Now().Format("2006-01-02") ${0}
endsnippet

snippet yyyy "now date" 
"2006-01-02" ${0}
endsnippet

snippet type "new type" 
type ${1} struct {
	${2} ${3} \`json:"${4}"\`
}${0}
endsnippet

snippet map "new map" 
${1} := map[${2}]${3}{
	"${4}": ${5},
}${0}
endsnippet

snippet fields "new logrus fields" 
fields := logrus.Fields{
	"${1}": ${2},
}${0}
endsnippet
